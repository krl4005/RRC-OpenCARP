[[model]]
author: Myokit CellML 1 API
documentation: """
    A Model For Human Ventricular Tissue - epicardial cell variant
    
    Catherine
    Lloyd
    
    Auckland Bioengineering Institute, The University of Auckland
    
    Model Status
    
    This variant of the model was created by Penny Noble of Oxford University,
    and represents the parameters given for the epicardial cell variant in Ten
    Tusscher et al. 2004. A stimulus protocol component has been added to the
    model to allow simulation of trains of action potentials. This file is
    known to run in OpenCell and COR to recreate the published results. The
    units have been checked and they are consistent.
    
    Model Structure
    
    ABSTRACT: The experimental and clinical possibilities for studying cardiac
    arrhythmias in human ventricular myocardium are very limited. Therefore,
    the use of alternative methods such as computer simulations is of great
    importance. In this article we introduce a mathematical model of the action
    potential of human ventricular cells that, while including a high level of
    electrophysiological detail, is computationally cost-effective enough to be
    applied in large-scale spatial simulations for the study of reentrant
    arrhythmias. The model is based on recent experimental data on most of the
    major ionic currents: the fast sodium, L-type calcium, transient outward,
    rapid and slow delayed rectifier, and inward rectifier currents. The model
    includes a basic calcium dynamics, allowing for the realistic modeling of
    calcium transients, calcium current inactivation, and the contraction
    staircase. We are able to reproduce human epicardial, endocardial, and M
    cell action potentials and show that differences can be explained by
    differences in the transient outward and slow delayed rectifier currents.
    Our model reproduces the experimentally observed data on action potential
    duration restitution, which is an important characteristic for reentrant
    arrhythmias. The conduction velocity restitution of our model is broader
    than in other models and agrees better with available data. Finally, we
    model the dynamics of spiral wave rotation in a two-dimensional sheet of
    human ventricular tissue and show that the spiral wave follows a complex
    meandering pattern and has a period of 265 ms. We conclude that the
    proposed model reproduces a variety of electrophysiological behaviors and
    provides a basis for studies of reentrant arrhythmias in human ventricular
    tissue.
    
    The original paper reference is cited below:
    
    A model for human ventricular tissue, K.H.W.J. ten Tusscher, D. Noble, P.J.
    Noble, and A.V. Panfilov, 2004,
    American Journal of Physiology
    , 286, H1573-H1589. PubMed ID: 14656705
    
    cell diagram
    
    A schematic diagram of the Ten Tusscher et al. 2004 mathematical model of
    the human ventricular myocyte.
    """
name: tentusscher_2004_epi_cell
# Initial values
membrane.v                                          = -86.2
rapid_time_dependent_potassium_current_Xr1_gate.Xr1 = 0
rapid_time_dependent_potassium_current_Xr2_gate.Xr2 = 1
slow_time_dependent_potassium_current_Xs_gate.Xs    = 0
fast_sodium_current_m_gate.m                        = 0
fast_sodium_current_h_gate.h                        = 0.75
fast_sodium_current_j_gate.j                        = 0.75
L_type_Ca_current_d_gate.d                          = 0
L_type_Ca_current_f_gate.f                          = 1
L_type_Ca_current_fCa_gate.fCa                      = 1
transient_outward_current_s_gate.s                  = 1
transient_outward_current_r_gate.r                  = 0
intracellular_ions.cai                              = 0.0002
calcium_dynamics.Ca_SR                              = 0.2
calcium_dynamics.g                                  = 1
sodium_dynamics.Na_i                                = 11.6
potassium_dynamics.K_i                              = 138.3

[multipliers]
i_cal_pca_multiplier = 1
i_kr_multiplier = 1
i_ks_multiplier = 1
i_nal_multiplier = 1
i_na_multiplier = 1
jup_multiplier = 1
i_to_multiplier = 1
i_k1_multiplier = 1
i_NCX_multiplier = 1
i_nak_multiplier = 1
i_kb_multiplier = 1
i_nab_multiplier = 1 
i_fake1_multiplier = 0
i_fake2_multiplier = 0

[L_type_Ca_current]
g_CaL = 0.000175 [L/F/ms (0.001)]
    in [L/F/ms (0.001)]
i_CaL = g_CaL * L_type_Ca_current_d_gate.d * L_type_Ca_current_f_gate.f * L_type_Ca_current_fCa_gate.fCa * 4 * membrane.v * membrane.F^2 / (membrane.R * membrane.T) * (intracellular_ions.cai * exp(2 * membrane.v * membrane.F / (membrane.R * membrane.T)) - 0.341 * calcium_dynamics.Ca_o) / (exp(2 * membrane.v * membrane.F / (membrane.R * membrane.T)) - 1)
    in [A/F]

[L_type_Ca_current_d_gate]
alpha_d = 1.4 / (1 + exp((-35 [mV] - membrane.v) / 13 [mV])) + 0.25
    in [1]
beta_d = 1.4 / (1 + exp((membrane.v + 5 [mV]) / 5 [mV]))
    in [1]
dot(d) = (d_inf - d) / tau_d
    in [1]
d_inf = 1 / (1 + exp((-5 [mV] - membrane.v) / 7.5 [mV]))
    in [1]
gamma_d = 1 [ms] / (1 + exp((50 [mV] - membrane.v) / 20 [mV]))
    in [ms]
tau_d = 1 [ms] * alpha_d * beta_d + gamma_d
    in [ms]

[L_type_Ca_current_fCa_gate]
alpha_fCa = 1 / (1 + (intracellular_ions.cai / 0.000325 [mM])^8)
    in [1]
beta_fCa = 0.1 / (1 + exp((intracellular_ions.cai - 0.0005 [mM]) / 0.0001 [mM]))
    in [1]
d_fCa = (fCa_inf - fCa) / tau_fCa
    in [mS/uF]
dot(fCa) = piecewise(fCa_inf > fCa and membrane.v > -60 [mV], 0 [mS/uF], d_fCa)
    in [1]
fCa_inf = (alpha_fCa + beta_fCa + gama_fCa + 0.23) / 1.46
    in [1]
gama_fCa = 0.2 / (1 + exp((intracellular_ions.cai - 0.00075 [mM]) / 0.0008 [mM]))
    in [1]
tau_fCa = 2 [ms]
    in [ms]

[L_type_Ca_current_f_gate]
dot(f) = (f_inf - f) / tau_f
    in [1]
f_inf = 1 / (1 + exp((membrane.v + 20 [mV]) / 7 [mV]))
    in [1]
tau_f = 1125 [ms] * exp(-(membrane.v + 27 [mV])^2 / 240 [mV^2]) + 80 [ms] + 165 [ms] / (1 + exp((25 [mV] - membrane.v) / 10 [mV]))
    in [ms]

[calcium_background_current]
g_bca = 0.000592 [mS/uF]
    in [mS/uF]
i_b_Ca = g_bca * (membrane.v - reversal_potentials.E_Ca)
    in [A/F]

[intracellular_ions]
dot(cai) = calcium_dynamics.Ca_i_bufc * (calcium_dynamics.i_leak - calcium_dynamics.i_up + calcium_dynamics.i_rel - 1 [1 (1e+09)] * (L_type_Ca_current.i_CaL + calcium_background_current.i_b_Ca + calcium_pump_current.i_p_Ca - 2 * sodium_calcium_exchanger_current.i_NaCa) / (2 * 1 [1 (1e+15)] * membrane.V_c * membrane.F) * membrane.Cm)
    in [mM]

[calcium_dynamics]
Buf_c = 0.15 [mM]
    in [mM]
Buf_sr = 10 [mM]
    in [mM]
dot(Ca_SR) = Ca_sr_bufsr * membrane.V_c / V_sr * (i_up - (i_rel + i_leak))
    in [mM]
Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (intracellular_ions.cai + K_buf_c)^2)
    in [1]
Ca_o = 2 [mM]
    in [mM]
Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_SR + K_buf_sr)^2)
    in [1]
K_buf_c = 0.001 [mM]
    in [mM]
K_buf_sr = 0.3 [mM]
    in [mM]
K_up = 0.00025 [mM]
    in [mM]
V_leak = 8e-5 [mS/uF]
    in [mS/uF]
V_sr = 0.001094 [um^3]
    in [um^3]
Vmax_up = 0.000425 [mM/ms]
    in [mM/ms]
a_rel = 0.016464 [mM/ms]
    in [mM/ms]
b_rel = 0.25 [mM]
    in [mM]
c_rel = 0.008232 [mM/ms]
    in [mM/ms]
d_g = (g_inf - g) / tau_g
    in [mS/uF]
dot(g) = piecewise(g_inf > g and membrane.v > -60 [mV], 0 [mS/uF], d_g)
    in [1]
g_inf = piecewise(intracellular_ions.cai < 0.00035 [mM], 1 / (1 + (intracellular_ions.cai / 0.00035 [mM])^6), 1 / (1 + (intracellular_ions.cai / 0.00035 [mM])^16))
    in [1]
i_leak = V_leak * (Ca_SR - intracellular_ions.cai)
    in [mM/ms]
i_rel = (a_rel * Ca_SR^2 / (b_rel^2 + Ca_SR^2) + c_rel) * L_type_Ca_current_d_gate.d * g
    in [mM/ms]
i_up = Vmax_up / (1 + K_up^2 / intracellular_ions.cai^2)
    in [mM/ms]
tau_g = 2 [ms]
    in [ms]

[calcium_pump_current]
K_pCa = 0.0005 [mM]
    in [mM]
g_pCa = 0.825 [A/F]
    in [A/F]
i_p_Ca = g_pCa * intracellular_ions.cai / (intracellular_ions.cai + K_pCa)
    in [A/F]

[engine]
time = 0 [ms] bind time
    in [ms]
pace = 0 bind pace

[fast_sodium_current]
g_Na = 14.838 [mS/uF]
    in [mS/uF]
i_Na = g_Na * fast_sodium_current_m_gate.m^3 * fast_sodium_current_h_gate.h * fast_sodium_current_j_gate.j * (membrane.v - reversal_potentials.E_Na)
    in [A/F]

[fast_sodium_current_h_gate]
alpha_h = piecewise(membrane.v < -40 [mV], 0.057 [mS/uF] * exp(-(membrane.v + 80 [mV]) / 6.8 [mV]), 0 [mS/uF])
    in [mS/uF]
beta_h = piecewise(membrane.v < -40 [mV], 2.7 [mS/uF] * exp(0.079 [1/mV] * membrane.v) + 310000 [mS/uF] * exp(0.3485 [1/mV] * membrane.v), 0.77 [mS/uF] / (0.13 * (1 + exp((membrane.v + 10.66 [mV]) / -11.1 [mV]))))
    in [mS/uF]
dot(h) = (h_inf - h) / tau_h
    in [1]
h_inf = 1 / (1 + exp((membrane.v + 71.55 [mV]) / 7.43 [mV]))^2
    in [1]
tau_h = 1 / (alpha_h + beta_h)
    in [ms]

[fast_sodium_current_j_gate]
alpha_j = piecewise(membrane.v < -40 [mV], (-25428 [mS/uF] * exp(0.2444 [1/mV] * membrane.v) - 6.948e-6 [mS/uF] * exp(-0.04391 [1/mV] * membrane.v)) * (membrane.v + 37.78 [mV]) / 1 [mV] / (1 + exp(0.311 [1/mV] * (membrane.v + 79.23 [mV]))), 0 [mS/uF])
    in [mS/uF]
beta_j = piecewise(membrane.v < -40 [mV], 0.02424 [mS/uF] * exp(-0.01052 [1/mV] * membrane.v) / (1 + exp(-0.1378 [1/mV] * (membrane.v + 40.14 [mV]))), 0.6 [mS/uF] * exp(0.057 [1/mV] * membrane.v) / (1 + exp(-0.1 [1/mV] * (membrane.v + 32 [mV]))))
    in [mS/uF]
dot(j) = (j_inf - j) / tau_j
    in [1]
j_inf = 1 / (1 + exp((membrane.v + 71.55 [mV]) / 7.43 [mV]))^2
    in [1]
tau_j = 1 / (alpha_j + beta_j)
    in [ms]

[fast_sodium_current_m_gate]
alpha_m = 1 / (1 + exp((-60 [mV] - membrane.v) / 5 [mV]))
    in [1]
beta_m = 0.1 / (1 + exp((membrane.v + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((membrane.v - 50 [mV]) / 200 [mV]))
    in [1]
dot(m) = (m_inf - m) / tau_m
    in [1]
m_inf = 1 / (1 + exp((-56.86 [mV] - membrane.v) / 9.03 [mV]))^2
    in [1]
tau_m = 1 [ms] * alpha_m * beta_m
    in [ms]

[inward_rectifier_potassium_current]
alpha_K1 = 0.1 [mS/uF] / (1 + exp(0.06 [1/mV] * (membrane.v - reversal_potentials.E_K - 200 [mV])))
    in [mS/uF]
beta_K1 = (3 [mS/uF] * exp(0.0002 [1/mV] * (membrane.v - reversal_potentials.E_K + 100 [mV])) + 1 [mS/uF] * exp(0.1 [1/mV] * (membrane.v - reversal_potentials.E_K - 10 [mV]))) / (1 + exp(-0.5 [1/mV] * (membrane.v - reversal_potentials.E_K)))
    in [mS/uF]
g_K1 = 5.405 [mS/uF]
    in [mS/uF]
i_K1 = g_K1 * xK1_inf * sqrt(potassium_dynamics.K_o / 5.4 [mM]) * (membrane.v - reversal_potentials.E_K)
    in [A/F]
xK1_inf = alpha_K1 / (alpha_K1 + beta_K1)
    in [1]

[stimulus]
i_stim = engine.pace * amp
    in [A/F]
amp = -1 [A/F]
    in [A/F]

[membrane]
Cm = 0.185 [uF]
    in [uF]
F =  9.64853414999999950e4 [C/mmol]
    in [C/mmol]
R = 8314.472 [J/mol/K]
    in [J/mol/K]
T = 310 [K]
    in [K]
dot(v) = -(i_ion + stimulus.i_stim)
    in [mV]
i_ion = inward_rectifier_potassium_current.i_K1 + transient_outward_current.i_to + rapid_time_dependent_potassium_current.i_Kr + slow_time_dependent_potassium_current.i_Ks + L_type_Ca_current.i_CaL + sodium_potassium_pump_current.i_NaK + fast_sodium_current.i_Na + sodium_background_current.i_b_Na + sodium_calcium_exchanger_current.i_NaCa + calcium_background_current.i_b_Ca + potassium_pump_current.i_p_K + calcium_pump_current.i_p_Ca
V_c = 0.016404 [um^3]
    in [um^3]
#i_Stim = piecewise(environment.time - floor(environment.time / stim_period) * stim_period >= stim_start and environment.time - floor(environment.time / stim_period) * stim_period <= stim_start + stim_duration, -stim_amplitude, 0 [A/F])
#    in [A/F]
#stim_amplitude = 52 [A/F]
#    in [A/F]
#stim_duration = 1 [ms]
#    in [ms]
#stim_period = 1000 [ms]
#    in [ms]
#stim_start = 10 [ms]
#    in [ms]

[potassium_dynamics]
dot(K_i) = -1 [1 (1e+09)] * (inward_rectifier_potassium_current.i_K1 + transient_outward_current.i_to + rapid_time_dependent_potassium_current.i_Kr + slow_time_dependent_potassium_current.i_Ks + potassium_pump_current.i_p_K + stimulus.i_stim - 2 * sodium_potassium_pump_current.i_NaK) * membrane.Cm / (1 [1 (1e+15)] * membrane.V_c * membrane.F)
    in [mM]
K_o = 5.4 [mM]
    in [mM]

[potassium_pump_current]
g_pK = 0.0146 [mS/uF]
    in [mS/uF]
i_p_K = g_pK * (membrane.v - reversal_potentials.E_K) / (1 + exp((25 [mV] - membrane.v) / 5.98 [mV]))
    in [A/F]

[rapid_time_dependent_potassium_current]
g_Kr = 0.096 [mS/uF]
    in [mS/uF]
i_Kr = g_Kr * sqrt(potassium_dynamics.K_o / 5.4 [mM]) * rapid_time_dependent_potassium_current_Xr1_gate.Xr1 * rapid_time_dependent_potassium_current_Xr2_gate.Xr2 * (membrane.v - reversal_potentials.E_K)
    in [A/F]

[rapid_time_dependent_potassium_current_Xr1_gate]
dot(Xr1) = (xr1_inf - Xr1) / tau_xr1
    in [1]
alpha_xr1 = 450 / (1 + exp((-45 [mV] - membrane.v) / 10 [mV]))
    in [1]
beta_xr1 = 6 / (1 + exp((membrane.v + 30 [mV]) / 11.5 [mV]))
    in [1]
tau_xr1 = 1 [ms] * alpha_xr1 * beta_xr1
    in [ms]
xr1_inf = 1 / (1 + exp((-26 [mV] - membrane.v) / 7 [mV]))
    in [1]

[rapid_time_dependent_potassium_current_Xr2_gate]
dot(Xr2) = (xr2_inf - Xr2) / tau_xr2
    in [1]
alpha_xr2 = 3 / (1 + exp((-60 [mV] - membrane.v) / 20 [mV]))
    in [1]
beta_xr2 = 1.12 / (1 + exp((membrane.v - 60 [mV]) / 20 [mV]))
    in [1]
tau_xr2 = 1 [ms] * alpha_xr2 * beta_xr2
    in [ms]
xr2_inf = 1 / (1 + exp((membrane.v + 88 [mV]) / 24 [mV]))
    in [1]

[reversal_potentials]
E_Ca = 0.5 * membrane.R * membrane.T / membrane.F * log(calcium_dynamics.Ca_o / intracellular_ions.cai)
    in [mV]
E_K = membrane.R * membrane.T / membrane.F * log(potassium_dynamics.K_o / potassium_dynamics.K_i)
    in [mV]
E_Ks = membrane.R * membrane.T / membrane.F * log((potassium_dynamics.K_o + P_kna * sodium_dynamics.Na_o) / (potassium_dynamics.K_i + P_kna * sodium_dynamics.Na_i))
    in [mV]
E_Na = membrane.R * membrane.T / membrane.F * log(sodium_dynamics.Na_o / sodium_dynamics.Na_i)
    in [mV]
P_kna = 0.03
    in [1]

[slow_time_dependent_potassium_current]
g_Ks = 0.245 [mS/uF]
    in [mS/uF]
i_Ks = g_Ks * slow_time_dependent_potassium_current_Xs_gate.Xs^2 * (membrane.v - reversal_potentials.E_Ks)
    in [A/F]

[slow_time_dependent_potassium_current_Xs_gate]
dot(Xs) = (xs_inf - Xs) / tau_xs
    in [1]
alpha_xs = 1100 / sqrt(1 + exp((-10 [mV] - membrane.v) / 6 [mV]))
    in [1]
beta_xs = 1 / (1 + exp((membrane.v - 60 [mV]) / 20 [mV]))
    in [1]
tau_xs = 1 [ms] * alpha_xs * beta_xs
    in [ms]
xs_inf = 1 / (1 + exp((-5 [mV] - membrane.v) / 14 [mV]))
    in [1]

[sodium_background_current]
g_bna = 0.00029 [mS/uF]
    in [mS/uF]
i_b_Na = g_bna * (membrane.v - reversal_potentials.E_Na)
    in [A/F]

[sodium_calcium_exchanger_current]
K_NaCa = 1000 [A/F]
    in [A/F]
K_sat = 0.1
    in [1]
Km_Ca = 1.38 [mM]
    in [mM]
Km_Nai = 87.5 [mM]
    in [mM]
alpha = 2.5
    in [1]
gamma = 0.35
    in [1]
i_NaCa = K_NaCa * (exp(gamma * membrane.v * membrane.F / (membrane.R * membrane.T)) * sodium_dynamics.Na_i^3 * calcium_dynamics.Ca_o - exp((gamma - 1) * membrane.v * membrane.F / (membrane.R * membrane.T)) * sodium_dynamics.Na_o^3 * intracellular_ions.cai * alpha) / ((Km_Nai^3 + sodium_dynamics.Na_o^3) * (Km_Ca + calcium_dynamics.Ca_o) * (1 + K_sat * exp((gamma - 1) * membrane.v * membrane.F / (membrane.R * membrane.T))))
    in [A/F]

[sodium_dynamics]
dot(Na_i) = -1 [1 (1e+09)] * (fast_sodium_current.i_Na + sodium_background_current.i_b_Na + 3 * sodium_potassium_pump_current.i_NaK + 3 * sodium_calcium_exchanger_current.i_NaCa) * membrane.Cm / (1 [1 (1e+15)] * membrane.V_c * membrane.F)
    in [mM]
Na_o = 140 [mM]
    in [mM]

[sodium_potassium_pump_current]
K_mNa = 40 [mM]
    in [mM]
K_mk = 1 [mM]
    in [mM]
P_NaK = 1.362 [A/F]
    in [A/F]
i_NaK = P_NaK * potassium_dynamics.K_o / (potassium_dynamics.K_o + K_mk) * sodium_dynamics.Na_i / (sodium_dynamics.Na_i + K_mNa) / (1 + 0.1245 * exp(-0.1 * membrane.v * membrane.F / (membrane.R * membrane.T)) + 0.0353 * exp(-membrane.v * membrane.F / (membrane.R * membrane.T)))
    in [A/F]

[transient_outward_current]
g_to = 0.294 [mS/uF]
    in [mS/uF]
i_to = g_to * transient_outward_current_r_gate.r * transient_outward_current_s_gate.s * (membrane.v - reversal_potentials.E_K)
    in [A/F]

[transient_outward_current_r_gate]
dot(r) = (r_inf - r) / tau_r
    in [1]
r_inf = 1 / (1 + exp((20 [mV] - membrane.v) / 6 [mV]))
    in [1]
tau_r = 9.5 [ms] * exp(-(membrane.v + 40 [mV])^2 / 1800 [mV^2]) + 0.8 [ms]
    in [ms]

[transient_outward_current_s_gate]
dot(s) = (s_inf - s) / tau_s
    in [1]
s_inf = 1 / (1 + exp((membrane.v + 20 [mV]) / 5 [mV]))
    in [1]
tau_s = 85 [ms] * exp(-(membrane.v + 45 [mV])^2 / 320 [mV^2]) + 5 [ms] / (1 + exp((membrane.v - 20 [mV]) / 5 [mV])) + 3 [ms]
    in [ms]

[[protocol]]
# Level Start Length Period Multiplier
#  1      0     0.5     1000    0